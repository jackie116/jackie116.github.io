{"categories":[],"posts":[{"content":"這篇介紹hugo的一些基礎設定，但設定部分，可能會因為使用者下載的主題，有不同需要設定的地方，這邊我們就介紹常用和我有用到的設定。\n設定檔 設定檔預設是搜尋在根目錄的config.toml、config.yaml或config.json，如果根目錄有多個設定檔，使用者能用--config指令來指定設定檔，如：\nhugo --config debugconfig.toml  設定資料夾 一般使用都是上方的單一設定檔，但如果你網站在不同執行環境下需要不同的設定檔，則能用configDir(預設config/)來更靈活的管理。\n 每個文件都代表一個設定物件，像params.toml代表[Params]、menu.toml代表[Menu] 每個file content 都要是top-level 每個資料夾包含各自環境的設定檔（如下方_default、production、staging） 可以依據語言拆分（如下方menus.en.toml、menus.zh.toml）  ├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.zh.toml │ │ └── params.toml │ ├── production │ │ ├── config.toml │ │ └── params.toml │ └── staging │ ├── config.toml │ └── params.toml  在上方的設定架構下，輸入hugo --environment staging，則hugo會執行/_default和/staging的所有設置（staging優先）\n 預設的環境是development，輸入hugo server等同hugo --environment development;hugo則是production\n ","id":0,"section":"posts","summary":"這篇介紹hugo的一些基礎設定，但設定部分，可能會因為使用者下載的主題，有不同需要設定的地方，這邊我們就介紹常用和我有用到的設定。 設定檔 設定","tags":null,"title":"Hugo筆記3-設定","uri":"https://jackie116.github.io/2021/05/20210601/","year":"2021"},{"content":"上篇Hugo筆記1-介紹和安裝，介紹完基本的安裝和機制，今天來講Hugo的資料夾結構。 回想一下我們建立網站資料夾的指令：\nhugo new site quickstart  我們創建名為quickstart的網站資料夾，hugo同時也在資料夾內幫忙建立好以下結構：\n. +-- archetypes +-- config.toml +-- content +-- data +-- layouts +-- static +-- themes    archetypes\n放文章模板的資料夾，預設會有title、date、draft: true屬性，\n可以事先設定好模板屬性，避免每次hugo new新文章都要設定。\n  config.toml\nHugo設定檔，預設.toml，也支援.json、.yaml、.yml。\nHugo Themes下載的主題大部分都有預設的config，可以直接替換使用。\n  content\n所有的內容(頁面)都存放在這個資料夾，資料夾內每個top-level資料夾都視為一個content section。\nHugo預設指派content section 為content type。\n這部分看官方原文比較好理解：\n   Content section : A Section is a collection of pages that gets defined based on the organization structure under the content/ directory.**\n  Content type : A content type is a way to organize your content. Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path. E.g. content/blog/my-first-event.md will be of type blog if no type set.\n   data\n用來存放生成網站的設定文件，或是自定義 data templates 使Hugo能動態抓取資料。\n  layouts\n存放用於生成靜態網站的.html模板。\n下載的theme都有各自的layouts，自行設計才會用到。\n  static\n存放靜態資源檔案，圖片、css、javascript\n  themes\n存放下載的主題。\n有多個主題時，網站生成時能用 -t參數指定。\n  其他資料夾 以上結構是網站生成時預設的資料夾，這邊再講兩個進階使用時需手動建立的資料夾：\n  assets\n存放所有需要Hugo Pipes處理的文件，只有使用了.Permalink、.RelPermalink的文件會被放到public資料夾。\n  resources\n緩存部分文件以加速網站生成，模板作者也可用來分發SASS文件，因此你不用裝預處理器。\n  小結 這篇介紹Hugo的資料夾結構，下篇再介紹Hugo的設定\nReference Directory Structure | Hugo\n","id":1,"section":"posts","summary":"上篇Hugo筆記1-介紹和安裝，介紹完基本的安裝和機制，今天來講Hugo的資料夾結構。 回想一下我們建立網站資料夾的指令： hugo new site quickstart 我們創建名為","tags":null,"title":"Hugo筆記2-資料夾結構","uri":"https://jackie116.github.io/2021/05/20210530/","year":"2021"},{"content":"Blog的第一篇文章，就用來記錄一下這個Blog的建立方式，也給其他需要的人參考。\n其實現在Blog有很多選擇，舉凡Medium、Blogger、痞客邦、WordPress， 最後選擇架設在github pages上，有幾點理由：\n 彈性 本身就是軟體工程師，跟風一下ＸＤ 練習用git管理這個靜態網站，大學其實有在用，但工作上用不到，開始遺忘了\u0026hellip;  而說到用github pages架網站\u0008，主流又有三種靜態網站生產器做選擇：\n Jekyll Hugo Hexo  至於如何選擇，網路上也有許多比較文，這邊不再贅述， 三者背後都有廣大的支持者，各有優劣，挑個喜歡的就好。\n我選擇Hugo，單純官網看了喜歡，加上背後實作的Ruby Gem、Nodejs、Go 我都沒接觸過，\n這種靜態網站生成器，基本上一般不太需要碰到這些程式碼， 但如果哪天我想自己額外製作一些功能需要時，我想我對學習Golang會比另外兩個更有興趣一些。\n安裝(macOS) 官方教學很簡單，網路上也許多同樣文章，這邊就快速帶過\nbrew install hugo #安裝 hugo version #檢查hugo版本 hugo new site quickstart #建立新網站資料夾，quickstart可改成你想要的資料夾名稱 cd quickstart #進入資料夾 git init #建立和初始化git數據庫 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke #加入子模組  最後一步git submodule add，能到 Hugo theme 找自己喜歡的主題替換，最後面則是存放的資料夾位置 。\n後續步驟可能會因為不同主題的設計，有些為差異，但主要就是都是替換和編輯config文件。\n常用指令和機制 hugo help能列出所有可用指令，這邊介紹幾個比較常用的:\n建立新文章 hugo new posts/my-first-post.md  啟動hugo伺服器 hugo server  可開啟 http://localhost:1313/ 查看網站\nDraft, publishdate, expirydate Hugo能在文章的Front matter建立draft,publishdate和expirydate三種屬性， 以下三種情況文章不會被發布：\n draft: true狀態 還沒到publishdate設定日期 超過\u0008\u0008expirydate設定日期  因此如果要連以上三種都發布，就要在hugo server後加上對應的參數\n-D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future  LiveReload Hugo預設啟動LiveReload機制，當你執行hugo server，hugo就會監看你project內所有的新增、刪除和更改，當偵測到改變，便會立刻重新建立頁面，並在結束後通知瀏覽器進行刷新。\n如果某些情況下（產品頁面），不想使用這種自動更新機制，能用以下方式關閉：\nhugo server --watch=false  or\nhugo server --disableLiveReload  或直接在config檔內進行設定(config.yaml為例)\ndisableLiveReload: true  小結 這篇我們介紹Hugo基本的建立和機制，下篇我們將介紹Hugo的資料夾架構。\nReference Hugo - Getting started\n","id":2,"section":"posts","summary":"Blog的第一篇文章，就用來記錄一下這個Blog的建立方式，也給其他需要的人參考。 其實現在Blog有很多選擇，舉凡Medium、Blogge","tags":null,"title":"Hugo筆記1-介紹和安裝","uri":"https://jackie116.github.io/2021/05/my-first-post/","year":"2021"}],"tags":[]}